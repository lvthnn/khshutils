#!/bin/bash

set -e
set -o pipefail

PROGNAME=$(basename $0)

#######################################
# Print usage message to user.
# Globals:
#   None 
# Arguments:
#   None
# Outputs:
#   Writes help message to stdout
#######################################

usage() {
  cat << HEREDOC
  Extract fields from delimited files based on string identifier. 

  Extract fields from a delimited file based on the string identifiers
  i.e. column names and print to standard output. The output data are
  tab-delimited.
  
  USAGE:
    ${PROGNAME} [-d <delim>] [-f <fields>] [name ...]

  OPTIONS:
    -d, --delim <delim>    Delimiter separating fields in target file. Defaults
                            to tab.
    -f, --fields <fields>  Names of fields to cut from target file, separated
                            by a comma with no space between.
    -h, --help             Show this message and exit.
    -r, --reverse          Returns fields that are not specified in <fields>.
    -w, --warn             Exit with error if any of the requested fields are
                            not found in the target file.
    -v, --verbose          Increase verbosity of command output.
HEREDOC
}

#######################################
# Format and print error message.
# Globals:
#   None 
# Arguments:
#   None
# Outputs:
#   Writes error message to stdout
#######################################

die () {
  echo "${PROGNAME}: $*" >&2
  exit 2
}

# Set up variables

delim='\t'
fields=
input=
out_path=
reverse=''
verbose=''
warn=''

# Parse arguments from user

if [[ $# -eq 0 ]]; then
  usage
  exit 0
fi

while getopts ':d:f:hrvw-:' OPT; do
  if [[ "${OPT}" = '-' ]]; then
    OPT="${OPTARG%%=*}"         # parse option from <opt>=<val>
    OPTARG="${OPTARG#"${OPT}"}" # remove option name, result =<val>
    OPTARG="${OPTARG#=}"        # parse value from =<val>
  fi
  case "${OPT}" in
    'd' | 'delim') 
      delim="${OPTARG}"
    ;;
    'f' | 'fields') 
      fields="${OPTARG}"
    ;;
    'h' | 'help')
      usage
      exit 0
    ;;
    'r' | 'reverse')
      reverse='true'
    ;;
    'v' | 'verbose')
      verbose='true'
    ;;
    'w' | 'warn')
      warn='true'
    ;;
    ':')
      die "option requires an argument -- ${OPTARG}"
    ;;
    *)
      die "invalid option -- ${OPTARG}" 
    ;;
  esac
done
shift $((OPTIND-1))

if [[ $# -eq 1 ]]; then 
  input=$1
elif [[ -p /dev/stdin ]]; then
  input="/dev/stdin"
else
  die "missing file argument"
fi

if [[ "${verbose}" = true ]]; then
  echo "Parsed arguments"
  echo "----------------"
  echo "input: ${input}"
  echo "fields: ${fields}"
  echo "delim: ${delim}"
  echo "reverse: ${reverse}"
  echo "warn: ${warn}"
fi

# Create associative list mapping field names to integer indices 

fcut=''
fcutr=''
fields_req=$(echo "${fields}" | sed "s/,/\t/g")
fields_all=$(head -n 1 "${input}" | sed "s/${delim}/\t/g")

IFS=$'\t' read -r -a fields_usr <<< "${fields_req}"
IFS=$'\t' read -r -a fields_arr <<< "${fields_all}"

for field in "${fields_usr[@]}"; do
  found=''

  for i in "${!fields_arr[@]}"; do
    ind=$(("${i}" + 1))
    if [[ "${field}" == "${fields_arr[i]}" ]]; then
      fcut+="\$${ind},"
      found='true'
      break
    fi
  done

  if [[ -z "${found}" && ! -z "${warn}" ]]; then 
    die "field ${field} not found in input file"
  fi
done

# Print the header separately to avoid no header when input is from pipe

# head=$(head -n 1 "${input}" |
#   cut -d "${delim}" -f $(echo "${fcut::-1}" | sed 's/\$//g') |
#   sed "s/${delim}/ /g")

head=$(echo "${fields_req}" | sed 's/,/\t/g')

data=$(awk -F "${delim}" "{ print ${fcut::-1} }" "${input}" | tail -n +2)

echo -e "${head}\n${data}" | column -t
